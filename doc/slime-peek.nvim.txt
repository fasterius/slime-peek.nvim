 *slime-peek.nvim.txt*          Peek at data frames and objects with vim-slime

==============================================================================

 Table of contents                             *slime-peek.table-of-contents*

 1. Introduction 	         |slime-peek.introduction|
 2. Usage		         |slime-peek.usage|
 4. Functions		         |slime-peek.functions|

==============================================================================

 1. INTRODUCTION      				    *slime-peek.introduction*

 The aim of this plugin is to add convenience functions for data exploration
 tasks when using `vim-slime` with Python and R, such as quickly peeking at
 the head or column names of a data frame.

 The plugin will automatically detect which of the supported languages are
 currently in use in your document, whether that be Python or R scripts, R
 Markdown or Quarto documents.

 For scripts and R Markdown documents, the language is inferred by the
 filetype, as those documents are only used with their respective programming
 language.

 For Quarto documents, it gives precedence to any language specification in
 the YAML header (using either `engine:`, `knitr:` or `jupyter:`). In cases
 where the language isn't specified in the Quarto YAML header it will instead
 search for the language in the current chunk header.

==============================================================================

 2. USAGE      						   *slime-peek.usage*

 This plugin does not export any key mappings, but supplies user-commands for
 its functionality:

 :PeekHead    			                       *slime-peek.PeekHead*

   This command prints the head of the word currently under the cursor in
   whatever REPL is configured with the `vim-slime` plugin.

   If you want to create a key map for this command, you can do something like
   the following:
>lua
     vim.keymap.set('n', '<localleader>h', ':PeekHead<CR>')
<
 :PeekTail    		 	                       *slime-peek.PeekTail*

   This command prints the tail of the word currently under the cursor in
   whatever REPL is configured with the `vim-slime` plugin.

   If you want to create a key map for this command, you can do something like
   the following:
>lua
     vim.keymap.set('n', '<localleader>T', ':PeekTail<CR>')
<
 :PeekNames                                           *slime-peek.PeekNames*

   This command prints the column names of the word currently under the cursor
   in whatever REPL is configured with the `vim-slime` plugin.

   If you want to create a key map for this command, you can do something like
   the following:
>lua
     vim.keymap.set('n', '<localleader>n', ':PeekNames<CR>')
<
 :PeekDimensions                                 *slime-peek.PeekDimensions*

   This command prints the dimensions of the word currently under the cursor
   in whatever REPL is configured with the `vim-slime` plugin.

   If you want to create a key map for this command, you can do something like
   the following:
>lua
     vim.keymap.set('n', '<localleader>d', ':PeekDimensions<CR>')
<
 :PeekTypes                                           *slime-peek.PeekTypes*

   This command prints the data types or classes of the columns of the word
   currently under the cursor in whatever REPL is configured with the
   `vim-slime` plugin.

   If you want to create a key map for this command, you can do something like
   the following:
>lua
     vim.keymap.set('n', '<localleader>t', ':PeekTypes<CR>')
<
==============================================================================

 4. FUNCTIONS 					       *slime-peek.functions*

 peek_head()                                          *slime-peek.peek_head*

   This is the plugin function that `PeekHead` calls to print the head of the
   word under the cursor. You can also use this in a keymap:
>lua
     vim.keymap.set('n', '<localleader>h', require('slime-peek').peek_head())
<
 peek_tail()                                          *slime-peek.peek_tail*

   This is the plugin function that `PeekTail` calls to print the tail of the
   word under the cursor. You can also use this in a keymap:
>lua
     vim.keymap.set('n', '<localleader>T', require('slime-peek').peek_tail())
<
 peek_names()                                        *slime-peek.peek_names*

   This is the plugin function that `PeekNames` calls to print the column
   names of the word under the cursor. You can also use this in a keymap:
>lua
     vim.keymap.set('n', '<localleader>n', require('slime-peek').peek_names())
<
 peek_dimensions()                              *slime-peek.peek_dimensions*

   This is the plugin function that `PeekDimensions` calls to print the
   dimensions of the word under the cursor. You can also use this in a keymap:
>lua
     vim.keymap.set('n', '<localleader>d', require('slime-peek').peek_dimensions())
<
 peek_types()                                        *slime-peek.peek_types*

   This is the plugin function that `PeekTypes` calls to print the data types
   or classes of the columns of the word under the cursor. You can also use
   this in a keymap:
>lua
     vim.keymap.set('n', '<localleader>t', require('slime-peek').peek_types())
<
 vim:tw=78:ts=8:noet:ft=help:norl:
